
const pad2 = require('./tools').pad2;
const stateDefinition = {
    'reachable': {
        id: 'available',
        name: 'Available',
        role: 'indicator.reachable',
        write: false,
        read: true,
        type: 'boolean',
        def: false,
    },
    'ip': {
        id: 'ip',
        name: 'IP address of OpenDTU',
        role: 'info.ip',
        write: false,
        read: true,
        type: 'string',
        def: '0.0.0.0',
    },
    'hostname': {
        id: 'hostname',
        name: 'Current hostname of the dtu (as set in web GUI)',
        role: 'info.name ',
        write: false,
        read: true,
        type: 'string',
        def: '',
    },
    'rssi': {
        id: 'rssi',
        name: 'WiFi network quality',
        role: 'state',
        write: false,
        read: true,
        unit: 'db',
        type: 'number',
        def: 0,
        getter: x => Number(x),
    },
    'uptime': {
        id: 'uptime',
        name: 'Time in seconds since startup',
        role: 'state',
        write: false,
        read: true,
        type: 'string',
        def: '0',
        getter: x => {
            const seconds = pad2(Math.trunc(x % 60));
            const miutes = pad2(Math.trunc((x / 60) % 60));
            const houres = pad2(Math.trunc((x / 60 / 60) % 24));
            const days = Math.trunc(x / 60 / 60 / 24);
            return `${days} Days ${houres}:${miutes}:${seconds}`;
        },
    },
    'name': {
        id: 'name',
        name: 'Name of the inverter as configured in web GUI',
        role: 'state',
        write: false,
        read: true,
        type: 'string',
        def: '',
    },
    'serial': {
        id: 'serial',
        name: 'Serial of the inverter',
        role: 'state',
        write: false,
        read: true,
        type: 'string',
        def: '',
    },
    'bootloaderversion': {
        id: 'bootloaderversion',
        name: 'Bootloader version of the inverter',
        role: 'state',
        write: false,
        read: true,
        type: 'string',
        def: '',
    },
    'fwbuildversion': {
        id: 'fwbuildversion',
        name: 'Firmware version of the inverter',
        role: 'state',
        write: false,
        read: true,
        type: 'string',
        def: '',
    },
    'fwbuilddatetime': {
        id: 'fwbuilddatetime',
        name: 'Build date / time of inverter firmware',
        role: 'state',
        write: false,
        read: true,
        type: 'string',
        def: '',
    },
    'hwpartnumber': {
        id: 'hwpartnumber',
        name: 'Hardware part number of the invertere',
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        def: 0,
        getter: x => Number(x),
    },
    'hwversion': {
        id: 'hwversion',
        name: 'Hardware version of the inverter',
        role: 'state',
        write: false,
        read: true,
        type: 'string',
        def: '',
    },
    'producing': {
        id: 'producing',
        name: 'Indicates whether the inverter is producing AC power',
        role: 'state',
        write: false,
        read: true,
        type: 'boolean',
        def: false
    },
    'data_age': {
        id: 'last_update',
        name: 'Unix timestamp of last inverter statistics udpate',
        role: 'state',
        write: false,
        read: true,
        type: 'string',
        def: '',
        getter: x => {
            const date = new Date(Number(new Date()) - (x * 1000));
            date.setMinutes(date.getMinutes() - date.getTimezoneOffset());
            return date.toISOString().replace('T', ' ').split('.')[0];
        },
    },
    'current': {
        id: 'current',
        name: 'AC current in ampere',
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        unit: 'A',
        def: 0,
        getter: x => Number(x),
    },
    'efficiency': {
        id: 'efficiency',
        name: 'Ratio AC Power over DC Power in percent',
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        unit: '%',
        def: 0,
        getter: x => Number(x),
    },
    'frequency': {
        id: 'frequency',
        name: 'AC frequency in hertz',
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        unit: 'Hz',
        def: 0,
        getter: x => Number(x),
    },
    'power': {
        id: 'power',
        name: 'AC active power in watts',
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        unit: 'W',
        def: 0,
        getter: x => Number(x),
    },
    'powerdc': {
        id: 'powerdc',
        name: 'DC power in watts',
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        unit: 'W',
        def: 0,
        getter: x => Number(x),
    },
    'powerfactor': {
        id: 'powerfactor',
        name: 'Power factor in percent',
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        unit: '%',
        def: 0,
        getter: x => Number(x),
    },
    'reactivepower': {
        id: 'reactivepower',
        name: 'AC reactive power in VAr',
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        unit: 'VAr',
        def: 0,
        getter: x => Number(x),
    },
    'temperature': {
        id: 'temperature',
        name: 'Temperature of inverter in degree celsius',
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        unit: 'Â°C',
        def: 0,
        getter: x => Number(x),
    },
    'voltage': {
        id: 'voltage',
        name: 'AC voltage in volt',
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        unit: 'V',
        def: 0,
        getter: x => Number(x),
    },
    'yieldday': {
        id: 'yieldday',
        name: 'Energy converted to AC per day in watt hours',
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        unit: 'Wh',
        def: 0,
        getter: x => Number(x),
    },
    'yieldtotal': {
        id: 'yieldtotal',
        name: 'Energy converted to AC since reset watt hours',
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        unit: 'kWh',
        def: 0,
        getter: x => Number(x),
    },
    'irradiation': {
        id: 'irradiation',
        name: 'Ratio DC Power over set maximum power (in web GUI)',
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        unit: '%',
        def: 0,
        getter: x => Number(x),
    },
    'limit_relative': {
        id: 'power_control.current_limit_relative',
        name: 'Current applied production limit of the inverter',
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        unit: '%',
        def: 0,
        getter: x => Number(x),
    },
    'limit_absolute': {
        id: 'power_control.current_limit_absolute',
        name: 'Current applied production limit of the inverter',
        role: 'state',
        write: false,
        read: true,
        type: 'number',
        unit: 'W',
        def: 0,
        getter: x => Number(x),
    },
    'limit_persistent_relative': {
        id: 'power_control.limit_persistent_relative',
        name: 'Set the inverter limit as a percentage of total production capability. The value will survive the night without power. The updated value will show up in the web GUI and limit_relative topic immediatly.',
        role: 'state',
        write: true,
        read: true,
        type: 'number',
        unit: '%',
        def: 0,
        getter: x => Number(x),
        setter: x => String(x)
    },
    'limit_persistent_absolute': {
        id: 'power_control.limit_persistent_absolute',
        name: 'Set the inverter limit as a absolute value. The value will survive the night without power. The updated value will set immediatly within the inverter but show up in the web GUI and limit_relative topic after around 4 minutes. If you are using a already known inverter (known Hardware ID), the updated value will show up within a few seconds.',
        role: 'state',
        write: true,
        read: true,
        type: 'number',
        unit: 'W',
        def: 0,
        getter: x => Number(x),
        setter: x => String(x)
    },

    'limit_nonpersistent_relative': {
        id: 'power_control.limit_nonpersistent_relative',
        name: 'Set the inverter limit as a percentage of total production capability. The value will reset to the last persistent value at night without power. The updated value will show up in the web GUI and limit_relative topic immediatly. The value must be published non-retained, otherwise it will be ignored!',
        role: 'state',
        write: true,
        read: true,
        type: 'number',
        unit: '%',
        def: 0,
        getter: x => Number(x),
        setter: x => String(x)
    },
    'limit_nonpersistent_absolute': {
        id: 'power_control.limit_nonpersistent_absolute',
        name: 'Set the inverter limit as a absolute value. The value will reset to the last persistent value at night without power. The updated value will set immediatly within the inverter but show up in the web GUI and limit_relative topic after around 4 minutes. If you are using a already known inverter (known Hardware ID), the updated value will show up within a few seconds. The value must be published non-retained, otherwise it will be ignored!',
        role: 'state',
        write: true,
        read: true,
        type: 'number',
        unit: 'W',
        def: 0,
        getter: x => Number(x),
        setter: x => String(x)
    },
    'power_switch': {
        id: 'power_control.power_switch',
        name: 'Turn the inverter on or off',
        role: 'state',
        write: true,
        read: true,
        type: 'boolean',
        def: true,
        getter: x => x == 1,
        setter: x => x ? '1' : '0',
    },
    'restart': {
        id: 'power_control.restart',
        name: 'Restarts the inverters (also resets YieldDay)',
        role: 'button',
        write: true,
        read: true,
        type: 'boolean',
        def: true,
        setter: x => x ? '1' : '0',
    },
};

module.exports = {
    stateDefinition: stateDefinition,
};